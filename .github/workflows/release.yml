name: Release Flutter (Mobile & Desktop)
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      version:
        description: "Tag to create (e.g. v2.10.0). Must include 'v' and must match pubspec"
        required: true
        default: "v2.10.0"
        type: string
      environment:
        type: choice
        description: "Which environment are you using? (iOS only)"
        required: true
        default: "development"
        options:
          - development
          - production
      prerelease:
        description: "Prerelease"
        required: false
        default: false
        type: boolean

# Declare default permissions as read only.
permissions: read-all

jobs:
  draft-release:
    name: Draft Github release
    runs-on: ubuntu-latest
    needs:
      - apk-build
      - aab-build
      - ios-build
      - windows-build
      - linux-build
      - macos-build
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: build/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/

      - name: Push APK to Releases
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.event.inputs.version }}
          artifacts: "./**/*.apk,./**/*.aab,./**/*.ipa,./**/*.tar.gz,./**/*.zip"
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.FLUTTER_BOILERPLATE_BOT_TOKEN }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  apk-build:
    name: Create apk build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

#      - name: Setup NDK
#        uses: nttld/setup-ndk@v1
#        with:
#          ndk-version: 'r21e'
#          add-to-path: true
#        env:
#          ANDROID_NDK_HOME: '/usr/local/lib/android/sdk/ndk'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - run: flutter build apk --release --split-per-abi --no-tree-shake-icons

      # Package the build.
      - name: Copy build for Android
        run: cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/flutter-apk

      - uses: actions/upload-artifact@v3
        with:
          name: apk-artifact
          path: ./*.apk

  aab-build:
    name: Create appbundle build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      #      - name: Setup NDK
      #        uses: nttld/setup-ndk@v1
      #        with:
      #          ndk-version: 'r21e'
      #          add-to-path: true
      #        env:
      #          ANDROID_NDK_HOME: '/usr/local/lib/android/sdk/ndk'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - run: flutter build appbundle --release --no-tree-shake-icons

      # Package the build.
      - name: Copy build for Android
        run: cp *.aab $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/bundle/release

      - uses: actions/upload-artifact@v3
        with:
          name: aab-artifact
          path: ./*.aab

  ios-build:
    name: Create ios build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
          BUILD_CERTIFICATE_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          BUILD_CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          BUILD_CERT_DEV_BASE64: ${{ secrets.CERT_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          BUILD_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISIONING_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERT_PATH=$RUNNER_TEMP/ios_distribution.cer
          CERT_DEV_PATH=$RUNNER_TEMP/development.cer
          PP_PATH=$RUNNER_TEMP/flutter-template-ns-appstore.mobileprovision
          PP_DEV_PATH=$RUNNER_TEMP/flutter-template-ns-dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_CERTIFICATE_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$BUILD_CERT_BASE64" | base64 --decode --output $CERT_PATH
          echo -n "$BUILD_CERT_DEV_BASE64" | base64 --decode --output $CERT_DEV_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$BUILD_PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security import $CERT_DEV_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build
        run: flutter build ipa --release --export-options-plist=ios/ExportOptions-${{ github.event.inputs.environment }}.plist

      # Package the build.
      - name: Copy build for iOS
        run: cp *.ipa $GITHUB_WORKSPACE/
        working-directory: build/ios/ipa

      - uses: actions/upload-artifact@v3
        with:
          name: ios-artifact
          path: ./*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/flutter-template-ns-appstore.mobileprovision
          rm ~/Library/MobileDevice/Provisioning\ Profiles/flutter-template-ns-dev.mobileprovision

  windows-build:
    name: Create windows build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      # Build the application.
      - run: flutter build windows --release --no-tree-shake-icons

      - name: Copy VC redistributables to release directory for Windows
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
        working-directory: build\windows\runner\Release

      # Package the build.
      - name: Compress build for Windows
        run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\flutter_boilerplate_windows.zip
        working-directory: build\windows\runner\Release

      - uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: .\*.zip

  linux-build:
    name: Create linux build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      # Build the application.
      - run: flutter build linux --release --no-tree-shake-icons

      # Package the build.
      - name: Compress build for Linux
        run: tar czf $GITHUB_WORKSPACE/flutter_boilerplate_linux.tar.gz *
        working-directory: build/linux/x64/release/bundle

      - uses: actions/upload-artifact@v3
        with:
          name: linux-artifact
          path: ./*.tar.gz

  macos-build:
    name: Create macos build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      # Build the application.
      - run: flutter build macos --release --no-tree-shake-icons

      # Package the build.
      - name: Compress build for macOS
        run: ditto -c -k --sequesterRsrc --keepParent flutter_template_ns.app $GITHUB_WORKSPACE/flutter_boilerplate_macos.zip
        working-directory: build/macos/Build/Products/Release

      - uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./*.zip
